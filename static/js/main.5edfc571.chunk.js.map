{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","ALPHABET","LENGTH","NONE","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","ifShowResetButton","className","onClick","type","cn","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,gBAAAA,E,SAAAA,M,KAiCE,IAAME,EAAgB,WAC3B,IAAQC,EAA2BH,EAA3BG,SAAUC,EAAiBJ,EAAjBI,OAAQC,EAASL,EAATK,KAE1B,EAAkCC,mBAASD,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAGIF,oBAAS,GAHb,mBACEG,EADF,KAEEC,EAFF,KAIMC,EAnCR,SACEC,EAAiBL,GAChB,IADqCE,EACtC,wDACMI,EAAa,YAAOD,GAiB1B,OAfIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKP,EAASG,SACZ,OAAOY,EAAME,cAAcD,GAE7B,KAAKhB,EAASI,OACZ,OAAOW,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXT,EACKI,EAAcM,UAGhBN,EAWcO,CAAiBnB,EAAiBM,EAAWE,GAC5DY,EAAoBd,GAAaE,EAOvC,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMf,EAAaL,IAC5BqB,KAAK,SACLF,UAAWG,IACT,SACA,UACA,CACE,WAAYlB,IAAcJ,IAPhC,iCAcA,wBACEqB,KAAK,SACLD,QAAS,kBAAMf,EAAaJ,IAC5BkB,UAAWG,IACT,SACA,aACA,CACE,WAAYlB,IAAcH,IAPhC,4BAcA,wBACEoB,KAAK,SACLD,QAAS,kBAAMb,GAAc,SAAAgB,GAAI,OAAKA,MACtCJ,UAAWG,IACT,SACA,aACA,CACE,YAAahB,IAPnB,qBAcCY,GACC,wBACEG,KAAK,SACLD,QArDV,WACEf,EAAaH,GACbK,GAAc,IAoDNY,UAAU,4BAHZ,sBAUJ,6BACGX,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC1HlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5edfc571.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  ALPHABET = 'alphabet',\n  LENGTH = 'length',\n  NONE = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[], sortField: SortType, isReversed = false,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const { ALPHABET, LENGTH, NONE } = SortType;\n\n  const [sortField, setSortField] = useState(NONE);\n  const [\n    isReversed,\n    setIsReversed,\n  ] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, isReversed);\n  const ifShowResetButton = sortField || isReversed;\n\n  function reset() {\n    setSortField(NONE);\n    setIsReversed(false);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(ALPHABET)}\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            {\n              'is-light': sortField !== ALPHABET,\n            },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortField(LENGTH)}\n          className={cn(\n            'button',\n            'is-success',\n            {\n              'is-light': sortField !== LENGTH,\n            },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setIsReversed(prev => !prev)}\n          className={cn(\n            'button',\n            'is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n        >\n          Reverse\n        </button>\n\n        {ifShowResetButton && (\n          <button\n            type=\"button\"\n            onClick={reset}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}